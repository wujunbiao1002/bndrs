
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

	upstream bndrs.com{
		least_conn;    #把请求转发给连接数较少的后端服务器
		server 192.168.141.128:8080 weight=2 max_fails=1 fail_timeout=20s;
		server 192.168.141.129:8080 weight=2 max_fails=1 fail_timeout=20s;
		server 192.168.141.130:8080 weight=2 max_fails=1 fail_timeout=20s;
		server 192.168.141.131:8080 weight=2 max_fails=1 fail_timeout=20s;
		server 192.168.141.132:8080 weight=1 max_fails=1 fail_timeout=20s;
	}
	# 设置由 fail_timeout 定义的时间段内连接该主机的失败次数，以此来断定 fail_timeout 定义的时间段内该主机是否可用。默认情况下这个数值设置为 1。零值的话禁用这个数量的尝试。
	# 设置在指定时间内连接到主机的失败次数，超过该次数该主机被认为不可用。
	# 这里是在30s内尝试2次失败即认为主机不可用！

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		
		# 静态资源地址Nginx下的html目录
        location ~ .*.(html|htm|gif|jpg|jpeg|png|bmp|swf|css|js)$ {
            root   html;
            index  index.html index.htm;
        }
		
		# 拦截所有.do都转发给tomcat处理  
		location ~\.(do)?$ {
            proxy_pass http://bndrs.com;
			add_header backendIP $upstream_addr;
			proxy_redirect default;  
			proxy_connect_timeout 2s;
        }

		#将符合js,css文件的等设定expries缓存参数，要求浏览器缓存。

		location ~ .*\.(js|css)?$ {
			expires 30d; # 客户端缓存上述js,css数据30天
		}
		
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504 /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
